<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=1024" />
<link rel="icon" href="favicon.png" />
<link rel="stylesheet" type="text/css" href="texlike.css"/>
<link rel="stylesheet" type="text/css" href="sleef.css"/>
<title>SLEEF Documentation</title>
</head>
<body>
<h1>SLEEF Documentation - Other tools included in the package</h1>

<h2>Table of contents</h2>

<ul class="none" style="font-family: arial, sansserif; padding-left: 0.5cm;">
  <li><a href="index.xhtml">Introduction</a></li>
  <li><a href="compile.xhtml">Compiling and installing the library</a></li>
  <li><a href="purec.xhtml">Math library reference</a></li>
  <li><a href="dft.xhtml">DFT library reference</a></li>
  <li>&nbsp;</li>
  <li><a href="misc.xhtml">Other tools included in the package</a></li>
    <ul class="disc">
      <li><a href="misc.xhtml#testerlibm">Testers for libm</a></li>
      <li><a href="misc.xhtml#testerdft">Testers for DFT</a></li>
      <li><a href="misc.xhtml#gencoef">Tool for generating coefficients</a></li>
    </ul>
  <li>&nbsp;</li>
  <li><a href="benchmark.xhtml">Benchmark results</a></li>
  <li><a href="additional.xhtml">Additional notes</a></li>
</ul>

<h2 id="testerlibm">Libm tester</h2>

<p class="noindent">
  SLEEF has two kinds of testers, and each kind of testers has its own role.
</p>

<p>
  The first kind of testers is separated into tester and iut (which
  stands for Implementation Under Test.) Those two are built as
  separate executables, and communicate with each other using a
  pipe. The role for this tester is to perform a perfunctory set of
  tests to check if the build is correct. It is also performs
  regression tests. Since the tester executable and the iut executable
  are separated, the iut can be implemented with an exotic
  languages. It is also possible to perform a test over the network.
</p>

<p>
  The second kind of testers are designed to run continuously. It
  repeats randomly generating arguments for each function, and
  comparing the results of each function to the results calculated
  with the corresponding function in libmpfr. This tester is expected
  to find bugs if it is run for sufficiently long time.
</p>


<h2 id="testerdft">DFT tester</h2>

<p class="noindent">
  The DFT has its own tester. This tester compares the results
  computed by SLEEF DFT with a naive implementation.
</p>


<h2 id="gencoef">Gencoef</h2>

<p class="noindent">
  Gencoef is a small tool for generating the coefficients for
  polynomial approximation used in the kernels.
</p>

<p>
  In order to change the configurations, please edit gencoefdp.c. In
  the beginning of the file, specifications of the parameters for
  generating coefficients are listed. Enable one of them by changing
  #if. Then, run make to compile the source code. Run the gencoef, and
  it will show the generated coefficients in a few minutes. It may
  take longer time depending on the settings.
</p>

<p>
  There are two phases of the program. The first phase is the
  regression for minimizing the maximum relative error. This problem
  can be reduced to a linear programming problem, and the Simplex
  method is used in this implementation. This requires multi-precision
  calculation, and the implementation uses the MPFR library to do
  this. In this phase, it uses only a small number of values
  (specified by macro S, usually less than 100) within the input
  domain of the kernel function to approximate the function.  The
  function to approximate is given by FRFUNC function. Specifying
  higher values for S does not always give better results.
</p>

<p>
  The second phase is to optimize the coefficients so that it gives
  good accuracy with double precision calculation. In this phase, it
  checks 10000 points (specified by macro Q) within the specified
  argument range to see if the polynomial gives good error bounds. In
  some cases, the last few terms have to be calculated in higher
  precision in order to achieve 1 ULP or less overall accuracy, and
  this implementation can take care of that. The L parameter specifies
  the number of high precision coefficients.
</p>

<p>
  In some cases, it is desirable to fix the last few coefficients to
  values like 1 or 0.5. This can be specified if you define FIXCOEF0
  macro.
</p>

<p>
  Finding a set of good parameters is not a straightforward process.
</p>

<!--TEST-->

</body>
</html>
