//   Copyright Naoki Shibata and contributors 2010 - 2021.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <stdint.h>
#include <assert.h>

#include <signal.h>
#include <setjmp.h>

#include "misc.h"

#define CONST const

#define IMPORT_IS_EXPORT
#include "sleef.h"

static jmp_buf sigjmp;

typedef __vector double vector_double;
typedef __vector float  vector_float;

#ifdef ENABLE_VXE2
void sleef_tryVXE2();

static void sighandler(int signum) {
  longjmp(sigjmp, 1);
}

static int cpuSupportsVXE2() {
  static int cache = -1;
  if (cache != -1) return cache;

  void (*org);
  org = signal(SIGILL, sighandler);

  if (setjmp(sigjmp) == 0) {
    sleef_tryVXE2();
    cache = 1;
  } else {
    cache = 0;
  }

  signal(SIGILL, org);
  return cache;
}

#define SUBST_IF_VXE2(funcvxe2) if (cpuSupportsVXE2()) p = funcvxe2;
#else
#define SUBST_IF_VXE2(funcvxe2)
#endif

/*
 * DISPATCH_R_X, DISPATCH_R_X_Y and DISPATCH_R_X_Y_Z are the macro for
 * defining dispatchers. R, X, Y and Z represent the data types of
 * return value, first argument, second argument and third argument,
 * respectively. vf, vi, i and p correspond to vector FP, vector
 * integer, scalar integer and scalar pointer types, respectively.
 *
 * The arguments for the macros are as follows:
 *   fptype       : FP type name
 *   funcname     : Fundamental function name
 *   pfn          : Name of pointer of the function to the dispatcher
 *   dfn          : Name of the dispatcher function
 *   funcvxe      : Name of the VXE function
 *   funcvxe2     : Name of the VXE2 function
 */

#define DISPATCH_vf_vf(fptype, funcName, pfn, dfn, funcvxe, funcvxe2)	\
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0);			\
  static CONST VECTOR_CC fptype dfn(fptype arg0) {			\
    fptype CONST VECTOR_CC (*p)(fptype arg0) = funcvxe;			\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0);						\
  }									\
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0) = dfn;		\
  EXPORT CONST VECTOR_CC fptype funcName(fptype arg0) { return (*pfn)(arg0); }

#define DISPATCH_vf_vf_vf(fptype, funcName, pfn, dfn, funcvxe, funcvxe2) \
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, fptype arg1);	\
  static CONST VECTOR_CC fptype dfn(fptype arg0, fptype arg1) {		\
    fptype CONST VECTOR_CC (*p)(fptype arg0, fptype arg1) = funcvxe;	\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0, arg1);						\
  }									\
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, fptype arg1) = dfn; \
  EXPORT CONST VECTOR_CC fptype funcName(fptype arg0, fptype arg1) { return (*pfn)(arg0, arg1); }

#define DISPATCH_vf2_vf(fptype, fptype2, funcName, pfn, dfn, funcvxe, funcvxe2) \
  static CONST VECTOR_CC fptype2 (*pfn)(fptype arg0);			\
  static CONST VECTOR_CC fptype2 dfn(fptype arg0) {			\
    fptype2 CONST VECTOR_CC (*p)(fptype arg0) = funcvxe;		\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0);						\
  }									\
  static CONST VECTOR_CC fptype2 (*pfn)(fptype arg0) = dfn;		\
  EXPORT CONST VECTOR_CC fptype2 funcName(fptype arg0) { return (*pfn)(arg0); }

#define DISPATCH_vf_vf_vi(fptype, itype, funcName, pfn, dfn, funcvxe, funcvxe2) \
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, itype arg1);	\
  static CONST VECTOR_CC fptype dfn(fptype arg0, itype arg1) {		\
    fptype CONST VECTOR_CC (*p)(fptype arg0, itype arg1) = funcvxe;	\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0, arg1);						\
  }									\
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, itype arg1) = dfn;	\
  EXPORT CONST VECTOR_CC fptype funcName(fptype arg0, itype arg1) { return (*pfn)(arg0, arg1); }

#define DISPATCH_vi_vf(fptype, itype, funcName, pfn, dfn, funcvxe, funcvxe2) \
  static CONST VECTOR_CC itype (*pfn)(fptype arg0);			\
  static CONST VECTOR_CC itype dfn(fptype arg0) {			\
    itype CONST VECTOR_CC (*p)(fptype arg0) = funcvxe;			\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0);						\
  }									\
  static CONST VECTOR_CC itype (*pfn)(fptype arg0) = dfn;		\
  EXPORT CONST VECTOR_CC itype funcName(fptype arg0) { return (*pfn)(arg0); }

#define DISPATCH_vf_vf_vf_vf(fptype, funcName, pfn, dfn, funcvxe, funcvxe2) \
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, fptype arg1, fptype arg2); \
  static CONST VECTOR_CC fptype dfn(fptype arg0, fptype arg1, fptype arg2) { \
    fptype CONST VECTOR_CC (*p)(fptype arg0, fptype arg1, fptype arg2) = funcvxe; \
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0, arg1, arg2);					\
  }									\
  static CONST VECTOR_CC fptype (*pfn)(fptype arg0, fptype arg1, fptype arg2) = dfn; \
  EXPORT CONST VECTOR_CC fptype funcName(fptype arg0, fptype arg1, fptype arg2) { return (*pfn)(arg0, arg1, arg2); }

#define DISPATCH_i_i(funcName, pfn, dfn, funcvxe, funcvxe2)	\
  static CONST int (*pfn)(int arg0);				\
  static CONST int dfn(int arg0) {				\
    int CONST (*p)(int) = funcvxe;				\
    SUBST_IF_VXE2(funcvxe2);					\
    pfn = p;							\
    return (*pfn)(arg0);					\
  }								\
  static CONST int (*pfn)(int arg0) = dfn;			\
  EXPORT CONST int funcName(int arg0) { return (*pfn)(arg0); }

#define DISPATCH_p_i(funcName, pfn, dfn, funcvxe, funcvxe2)		\
  static CONST void *(*pfn)(int arg0);					\
  static CONST void *dfn(int arg0) {					\
    CONST void *(*p)(int) = funcvxe;					\
    SUBST_IF_VXE2(funcvxe2);						\
    pfn = p;								\
    return (*pfn)(arg0);						\
  }									\
  static CONST void *(*pfn)(int arg0) = dfn;				\
  EXPORT CONST void *funcName(int arg0) { return (*pfn)(arg0); }

//
