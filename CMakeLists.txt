# See doc/build-with-cmake.md for instructions on how to build Sleef.
cmake_minimum_required(VERSION 3.4.3)

set(SLEEF_VERSION_MAJOR 3)
set(SLEEF_VERSION_MINOR 0)
set(SLEEF_SOVERSION ${SLEEF_VERSION_MAJOR})

project(SLEEF
	VERSION ${SLEEF_VERSION_MAJOR}.${SLEEF_VERSION_MINOR}
	LANGUAGES C CXX)

message(STATUS "Configuring build for ${PROJECT_NAME}-version${SLEEF_VERSION_MAJOR}.${SLEEF_VERSION_MINOR}")

# Sanity check for in-source builds which we do not want to happen
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "SLEEF does not allow in-source builds.
You can refer to doc/build-with-cmake.md for instructions on how provide a separate build directory.
Note: Please remove autogenerated file `CMakeCache.txt` and directory `CMakeFiles` in the current directory.")
endif()

# Set output directories for the library files
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

# Compiler options; note: this list will build incrementally when introducing system detection
set(STRICTMATHFLAG -ffp-contract=off)

# We like to have a documented index of all targets in the project. The
# variables listed below carry the names of the targets defined throughout
# the project.

# Library defined in src/libm/CMakeLists.txt via command add_library
# Outputs libsleef.so
set(TARGET_LIBSLEEF "sleef")


add_subdirectory("src")
