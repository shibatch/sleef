# See doc/build-with-cmake.md for instructions on how to build Sleef.
cmake_minimum_required(VERSION 3.4.3)

set(SLEEF_VERSION_MAJOR 3)
set(SLEEF_VERSION_MINOR 1)
set(SLEEF_SOVERSION ${SLEEF_VERSION_MAJOR})

project(SLEEF
	VERSION ${SLEEF_VERSION_MAJOR}.${SLEEF_VERSION_MINOR}
	LANGUAGES C)

message(STATUS "Configuring build for \
${PROJECT_NAME}-v${SLEEF_VERSION_MAJOR}.${SLEEF_VERSION_MINOR}")

# Sanity check for in-source builds which we do not want to happen
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "SLEEF does not allow in-source builds.
You can refer to doc/build-with-cmake.md for instructions on how provide a \
separate build directory. Note: Please remove autogenerated file \
`CMakeCache.txt` and directory `CMakeFiles` in the current directory.")
endif()

# Set output directories for the library files
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# PLATFORM DETECTION

# TODO.

# COMPILER DETECTION

# All variables storing compiler flags should be prefixed with FLAGS_
set(FLAGS_WALL "-Wall;-Wno-unused;-Wno-attributes")

set(FLAGS_FASTMATH "-ffast-math")
set(FLAGS_STRICTMATH "-ffp-contract=off")
set(FLAGS_OPENMP "-fopenmp")

# FEATURE DETECTION

include(CheckCSourceCompiles)
include(CheckTypeSize)

CHECK_C_SOURCE_COMPILES(
  "int main(){ __float128 r = 1;}"
  COMPILER_SUPPORTS_FLOAT128)

CHECK_TYPE_SIZE("long double" LD_SIZE)
if(LD_SIZE GREATER "9")
  set(COMPILER_SUPPORTS_LONG_DOUBLE 1)
endif()

# sleef-config.h.in passes cmake settings to the source code
configure_file(
  ${PROJECT_SOURCE_DIR}/sleef-config.h.in
  ${PROJECT_BINARY_DIR}/include/sleef-config.h @ONLY)

# We like to have a documented index of all targets in the project. The
# variables listed below carry the names of the targets defined throughout
# the project.

# Generates object file (shared library) `libsleef`
# Defined in src/libm/CMakeLists.txt via command add_library
set(TARGET_LIBSLEEF "sleef")
# Generates executable files for running the test suite
# Defined in src/libm-tester/CMakeLists.txt via command add_executable
set(TARGET_IUT "iut")
set(TARGET_TESTER "tester")
# Runs the test suite
# Depends on targets: iut, tester
# Defined in src/libm-tester/CMakeLists.txt via command add_custom_target
set(TARGET_TEST "test-libm")
# Generates the helper executable file mkrename needed to write the sleef header
set(TARGET_MKRENAME "mkrename")

add_subdirectory("src")
